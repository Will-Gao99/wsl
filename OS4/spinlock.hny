const N = 3

shared = False
private = [ True, ] * N

invariant len(x for x in [shared,] + private where not x) == 1

def swap(s, p):
    atomic:
        let temp = !p:
            !p = !s
            !s = temp

def thread(self):
    while choose({ False, True }):
        # Enter critical section
        while private[self]:
            swap(?shared, ?private[self])

        # Critical section
        @cs: assert (not private[self]) and (atLabel(cs) == { (thread, self): 1 })

        # Leave critical section
        swap(private[self], shared)

    for i in {0..N-1}:
        spawn thread(i)